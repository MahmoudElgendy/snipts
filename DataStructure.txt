if data changes frequently => linked List
tasks waiting to be processed => stack queue
Enumerate Data=> means you want to access all the items in a collection (foreach)

foreach(var item in items){}
items called=> iteration variable

in c#8 or newer and dotnet core
arr.length -1 = ^1 in general ^n means length -n

how to embeded variable inside string $"myname is {name}"

predicate => a set of instructions to insure if a variable satisfy some conditions

array => length
any other collection => count

in breaf
use list if you want to add and delete and when you don't know number of items when initialization
user array if you  dont want to add and delete
list internally use array so add and delete may be slow because it need to copy elemnts to new array.

best use for lists
once create it and pop up with data numeration operation and replaceing without increase size operations
supperfat for look up 
not good choice for frequently add and delete

Dictionaries (hash tables) to facilitate lookups without index

array and list => designed for indexbase lookup and enumerating
dictionary=>designed for findig elements

Dictionary => not sorted -  use it unless you realy need sorting
SortedDictionary=>Automatically sort by key  - key must be type that can be sort int or string
SortedList(it is a dictionary not a list as same as SortedDictionary but different in performance)  most of situations you are not gonna need it u just need it if you sorted the elements already before initiate the sortedlist

sets and hash sets
 very useful when you want to compine differnt collections together.
 
 hash set dealing with collection as a whole
 
 multidimentinal array => one array with more than one index
 Jagged array => array of arrays

stack and queue =>Taskes to be processed  (frequent add and remove)
add=enque=push  remove = deque = pop
queue => web page requests, customers to be served ,task to be done 
stack => undo, call stack,debugging , full bus

stack pop , push , peek, isEmpty => all are O(1)

linked list => optimized for frequent add and remove but caller should decide whick item to remmove
remember it is not a list it is a kind of chain
whay add and remove is so fast be cause you dont need to shift any 


 StringBuilder y=new StringBuilder();
 while (stack.Count > 0)
    y.Append( stack.Pop()); ====> never use string inside loop to append value because it is immutable and for each iteration it create new object in the memory
    
--------------------------------------------------------------------------------------------

Dictionary is probably the closest. System.Collections.Generic.Dictionary implements the System.Collections.Generic.IDictionary interface (which is similar to Java's Map interface).

Some notable differences that you should be aware of:

Adding/Getting items
Java's HashMap has the put and get methods for setting/getting items
myMap.put(key, value)
MyObject value = myMap.get(key)
C#'s Dictionary uses [] indexing for setting/getting items
myDictionary[key] = value
MyObject value = myDictionary[key]
null keys
Java's HashMap allows null keys
.NET's Dictionary throws an ArgumentNullException if you try to add a null key
Adding a duplicate key
Java's HashMap will replace the existing value with the new one.
.NET's Dictionary will replace the existing value with the new one if you use [] indexing. If you use the Add method, it will instead throw an ArgumentException.
Attempting to get a non-existent key
Java's HashMap will return null.
.NET's Dictionary will throw a KeyNotFoundException. You can use the TryGetValue method instead of the [] indexing to avoid this:
MyObject value = null;
if (!myDictionary.TryGetValue(key, out value)) { /* key doesn't exist */ }
Dictionary's has a ContainsKey method that can help deal with the previous two problems.

contains key => o(1)
contains value => o(n)
